package LMSApiStepDefinitions;

import static io.restassured.RestAssured.given;
import static io.restassured.module.jsv.JsonSchemaValidator.matchesJsonSchemaInClasspath;
import static org.hamcrest.Matchers.equalTo;

import com.google.gson.Gson;

import BaseClass.BaseClass;
import LMSApiUtilities.TestContext;
import Models.SkillMember;
import io.cucumber.java.After;
import io.cucumber.java.Before;
import io.cucumber.java.Scenario;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;

public class LMSSkillPostSteps extends BaseClass{
	RequestSpecification request;
	Response response;

	Scenario scn;
	TestContext _textcontext;

	String jsonBody;
	String newSkillname;
	public LMSSkillPostSteps(TestContext testcontext) {
		
		this._textcontext=testcontext;
		
	}
	
	@Before
	public void beforeHook(Scenario s) {
		this.scn=s;
	}
	@After
	public void afterHook(Scenario s) {
		this.scn=s;
		if(_textcontext.get_responseCT()==null) {
			//scn.log("Response : No Rsponse recived");
		}
		else {
			//scn.log("Response: "+response.asString());
		}
			
	}
	@Given("LMS API is up and running with Skill Endpoint")
	public void lms_api_is_up_and_running_with_skill_endpoint() {
		request=given().baseUri(basePath).basePath(skillEndpoint)
				.contentType(ContentType.JSON)
				.auth().basic(userId, password);
		_textcontext.set_requestspecCT(request);
	}

	@When("I Hit the POST Request with skill name {string}")
	public void i_hit_the_post_request_with_skill_name(String Sname) {
		SkillMember jsonString=new SkillMember(Sname);
		Gson gson=new Gson();
		jsonBody = gson.toJson(jsonString); 
		
		response = _textcontext.get_requestspecCT().body(jsonBody).post();
		_textcontext.set_responseCT(response);
		newSkillname=Sname;
	}

	@Then("Displayed Successfuly Created with autogenerated Skill Id")
	public void displayed_successfuly_created_with_autogenerated_skill_id() {
		_textcontext.get_responseCT().then().assertThat().body("skill_name",equalTo(newSkillname));
		scn.log("Skill Respons Body message is : "+_textcontext.get_responseCT().path("message_response").toString());
		scn.log("Newly created Skill Id   : "+_textcontext.get_responseCT().path("skill_id").toString());
	}
    
	@Then("I Validate the POST response of Skill")
	public void i_validate_the_post_response_of_skill() {
		_textcontext.get_responseCT().then().assertThat().body(matchesJsonSchemaInClasspath("./JsonSchema/SkillPostSchema.json"));
		scn.log("Skill - Post request JSON schema validation is Successful");
	}
    
	@Then("Displayed Failed to create Skill")
	public void displayed_failed_to_create_skill() {
		scn.log("Failed Response Body message is : "+_textcontext.get_responseCT().path("message").toString());
	}

}
